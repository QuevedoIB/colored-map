{"version":3,"sources":["redux/reducers/countriesReducer.js","redux/actions/types.js","redux/reducers/index.js","redux/store.js","helpers/adjustZoomButtons.js","screens/Map.js","redux/actions/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","visitedCountriesData","countries","state","arguments","length","undefined","action","type","Object","objectSpread","payload","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","adjustZoomButtons","inButton","document","getElementsByClassName","style","fontSize","width","height","display","alignItems","justifyContent","outButton","top","window","addEventListener","event","idUser","data","alert","dispatch","concat","ES","FR","DE","GE","US","CA","Map","componentDidMount","react_default","a","createElement","build","map","backgroundColor","containerStyle","innerWidth","containerClassName","regionStyle","initial","fill","fill-opacity","stroke","stroke-width","stroke-opacity","series","regions","values","this","props","scale","normalizeFunction","Component","connect","App","es","screens_Map","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAEMA,EAAe,CAAEC,qBAAsB,IAU9BC,EARG,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBJ,EAAcO,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAQC,EAAOC,MACb,ICNiC,wBDO/B,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBF,qBAAsBM,EAAOI,UAClD,QAAS,OAAOR,IEJLS,cAAgB,CAC7BV,cCKaW,EALDC,YACZC,EACAC,YAAgBC,cCPLC,EAAoB,WAC/B,IAAMC,EAAWC,SAASC,uBAAuB,qBAAqB,GACtEF,EAASG,MAAMC,SAAW,OAC1BJ,EAASG,MAAME,MAAQ,OACvBL,EAASG,MAAMG,OAAS,OACxBN,EAASG,MAAMI,QAAU,OACzBP,EAASG,MAAMK,WAAa,SAC5BR,EAASG,MAAMM,eAAiB,SAGhC,IAAMC,EAAYT,SAASC,uBAAuB,sBAAsB,GACxEQ,EAAUP,MAAMC,SAAW,OAC3BM,EAAUP,MAAMQ,IAAM,OACtBD,EAAUP,MAAME,MAAQ,OACxBK,EAAUP,MAAMG,OAAS,OACzBI,EAAUP,MAAMI,QAAU,OAC1BG,EAAUP,MAAMK,WAAa,SAC7BE,EAAUP,MAAMM,eAAiB,UCNnCG,OAAOC,iBAAiB,UAAW,SAAAC,GCXE,IAAAC,EDaT,kBAAfD,EAAME,OACfC,MAAMH,EAAME,MACZtB,EAAMwB,UCf2BH,EDeID,EAAME,KCdtC,SAACE,GAGN,OAFAD,MAAK,iBAAAE,OAAkBJ,IAEhBG,EAAS,CACd7B,KAAM,wBAAyBG,QAAS,CACtC4B,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,eDSNC,6MAEJC,kBAAoB,WAClB5B,6EAKA,OACE6B,EAAAC,EAAAC,cAACC,EAAA,UAAD,CAAWC,IAAK,aACdC,gBAAgB,UAChBC,eAAgB,CACd7B,MAAOO,OAAOuB,WACd7B,OAAQ,SAEV8B,mBAAmB,MACnBC,YAAa,CACXC,QAAS,CACPC,KAAM,UACNC,eAAgB,GAChBC,OAAQ,OACRC,eAAgB,EAChBC,iBAAkB,IAGtBC,OAAQ,CACNC,QAAS,CACP,CACEC,OAAQC,KAAKC,MAAMlE,qBACnBmE,MAAO,CAAC,UAAW,WACnBC,kBAAmB,yBA9BfC,aA2CHC,cAJS,SAAApE,GACtB,MAAO,CAAEF,qBAAsBE,EAAMD,UAAUD,uBAGlCsE,CAAyB1B,GE9CzB2B,mLARX,OACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAU5D,MAAOA,GACfkC,EAAAC,EAAAC,cAACyB,EAAD,cALUJ,aCMEK,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAAS7D,SAAS8D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ef1acd9f.chunk.js","sourcesContent":["import { GET_VISITED_COUNTRIES } from \"../actions/types\";\n\nconst initialState = { visitedCountriesData: {} }\n\nconst countries = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_VISITED_COUNTRIES:\n      return { ...state, visitedCountriesData: action.payload }\n    default: return state;\n  }\n}\n\nexport default countries;","export const GET_VISITED_COUNTRIES = \"GET_VISITED_COUNTRIES\";","import { combineReducers } from \"redux\";\n\nimport countries from \"./countriesReducer\"\n\nexport default combineReducers({\n  countries\n})","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers'\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nexport default store;","export const adjustZoomButtons = () => {\n  const inButton = document.getElementsByClassName(\"jvectormap-zoomin\")[0]\n  inButton.style.fontSize = \"24px\";\n  inButton.style.width = \"40px\"\n  inButton.style.height = \"40px\"\n  inButton.style.display = \"flex\"\n  inButton.style.alignItems = \"center\"\n  inButton.style.justifyContent = \"center\"\n\n\n  const outButton = document.getElementsByClassName(\"jvectormap-zoomout\")[0]\n  outButton.style.fontSize = \"24px\";\n  outButton.style.top = \"60px\"\n  outButton.style.width = \"40px\"\n  outButton.style.height = \"40px\"\n  outButton.style.display = \"flex\"\n  outButton.style.alignItems = \"center\"\n  outButton.style.justifyContent = \"center\"\n}","import React, { Component } from 'react';\nimport { VectorMap } from \"react-jvectormap\";\nimport { connect } from \"react-redux\"\n\n//import * as actions from \"../redux/actions\";\nimport { adjustZoomButtons } from \"../helpers/adjustZoomButtons\"\nimport store from \"../redux/store\";\nimport { GET_VISITED_COUNTRIES } from '../redux/actions';\n\n//https://github.com/datasets/country-list/blob/master/data.csv  -> country codes\n\nwindow.addEventListener(\"message\", event => {\n\n  if (typeof event.data === \"string\") {\n    alert(event.data)\n    store.dispatch(GET_VISITED_COUNTRIES(event.data))\n  }\n\n})\n\nclass Map extends Component {\n\n  componentDidMount = () => {\n    adjustZoomButtons();\n  }\n\n  render() {\n\n    return (\n      <VectorMap map={'world_mill'}\n        backgroundColor=\"#88b4fc\"\n        containerStyle={{\n          width: window.innerWidth,\n          height: \"300px\"\n        }}\n        containerClassName=\"map\"\n        regionStyle={{\n          initial: {\n            fill: \"#e4e4e4\",\n            \"fill-opacity\": 0.9,\n            stroke: \"none\",\n            \"stroke-width\": 0,\n            \"stroke-opacity\": 0\n          }\n        }}\n        series={{\n          regions: [\n            {\n              values: this.props.visitedCountriesData,\n              scale: [\"#146804\", \"#008000\"],  //your color game's here\n              normalizeFunction: \"polynomial\"\n            }\n          ]\n        }}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { visitedCountriesData: state.countries.visitedCountriesData }\n}\n\nexport default connect(mapStateToProps)(Map);\n","export const GET_VISITED_COUNTRIES = idUser => {\n  return (dispatch) => {\n    alert(`Llamada api a ${idUser}`)\n    //api call\n    return dispatch({\n      type: \"GET_VISITED_COUNTRIES\", payload: {\n        ES: 1,\n        FR: 1,\n        DE: 1,\n        GE: 1,\n        US: 1,\n        CA: 1\n      }\n    })\n  }\n}","import React, { Component } from 'react';\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux/store\";\nimport Map from \"./screens/Map\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store={store}>\n        <Map />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}